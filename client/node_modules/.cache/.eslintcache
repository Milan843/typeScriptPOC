[{"/home/milan/Milan/Projects/typescript-poc/client/src/index.tsx":"1","/home/milan/Milan/Projects/typescript-poc/client/src/reportWebVitals.ts":"2","/home/milan/Milan/Projects/typescript-poc/client/src/redux/store.ts":"3","/home/milan/Milan/Projects/typescript-poc/client/src/App.tsx":"4","/home/milan/Milan/Projects/typescript-poc/client/src/routes.tsx":"5","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/index.ts":"6","/home/milan/Milan/Projects/typescript-poc/client/src/components/LogIn.tsx":"7","/home/milan/Milan/Projects/typescript-poc/client/src/components/Register.tsx":"8","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/authReducer.ts":"9","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/userReducer.ts":"10","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/auth.ts":"11","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/types.ts":"12","/home/milan/Milan/Projects/typescript-poc/client/src/api/index.ts":"13","/home/milan/Milan/Projects/typescript-poc/client/src/api/config.ts":"14","/home/milan/Milan/Projects/typescript-poc/client/src/api/keys.ts":"15","/home/milan/Milan/Projects/typescript-poc/client/src/services.ts":"16","/home/milan/Milan/Projects/typescript-poc/client/src/api/axios.ts":"17","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/error.ts":"18","/home/milan/Milan/Projects/typescript-poc/client/src/utils/yup.ts":"19","/home/milan/Milan/Projects/typescript-poc/client/src/components/Dashboard.tsx":"20","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/user.ts":"21","/home/milan/Milan/Projects/typescript-poc/client/src/ProtectedRoute.tsx":"22","/home/milan/Milan/Projects/typescript-poc/client/src/components/UserDashboard.tsx":"23","/home/milan/Milan/Projects/typescript-poc/client/src/components/Modal.tsx":"24","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/errorReducer.ts":"25"},{"size":627,"mtime":1625120689224,"results":"26","hashOfConfig":"27"},{"size":425,"mtime":1624885382313,"results":"28","hashOfConfig":"27"},{"size":510,"mtime":1625032879837,"results":"29","hashOfConfig":"27"},{"size":577,"mtime":1625233056430,"results":"30","hashOfConfig":"27"},{"size":905,"mtime":1625232743957,"results":"31","hashOfConfig":"27"},{"size":360,"mtime":1625232654635,"results":"32","hashOfConfig":"27"},{"size":3409,"mtime":1625236569048,"results":"33","hashOfConfig":"27"},{"size":6156,"mtime":1625236519857,"results":"34","hashOfConfig":"27"},{"size":1378,"mtime":1625235499930,"results":"35","hashOfConfig":"27"},{"size":787,"mtime":1625222214668,"results":"36","hashOfConfig":"27"},{"size":4123,"mtime":1625236660216,"results":"37","hashOfConfig":"27"},{"size":640,"mtime":1625235492547,"results":"38","hashOfConfig":"27"},{"size":1404,"mtime":1625124748718,"results":"39","hashOfConfig":"27"},{"size":391,"mtime":1625135300750,"results":"40","hashOfConfig":"27"},{"size":126,"mtime":1625089201129,"results":"41","hashOfConfig":"27"},{"size":308,"mtime":1625089073304,"results":"42","hashOfConfig":"27"},{"size":536,"mtime":1625135322972,"results":"43","hashOfConfig":"27"},{"size":424,"mtime":1625135877405,"results":"44","hashOfConfig":"27"},{"size":1018,"mtime":1625205297324,"results":"45","hashOfConfig":"27"},{"size":4168,"mtime":1625237644094,"results":"46","hashOfConfig":"27"},{"size":1588,"mtime":1625236732603,"results":"47","hashOfConfig":"27"},{"size":654,"mtime":1625171385033,"results":"48","hashOfConfig":"27"},{"size":6671,"mtime":1625236546755,"results":"49","hashOfConfig":"27"},{"size":1417,"mtime":1625233713451,"results":"50","hashOfConfig":"27"},{"size":633,"mtime":1625232586469,"results":"51","hashOfConfig":"27"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"a3anev",{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"54"},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"54"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"54"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"54"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"83"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"98","messages":"99","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"100","usedDeprecatedRules":"54"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"54"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"54"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},"/home/milan/Milan/Projects/typescript-poc/client/src/index.tsx",[],["111","112"],"/home/milan/Milan/Projects/typescript-poc/client/src/reportWebVitals.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/store.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/App.tsx",["113"],"import { BrowserRouter } from \"react-router-dom\";\nimport Routes from \"./routes\";\nimport { useEffect } from \"react\";\nimport \"./App.css\";\nimport { useDispatch } from \"react-redux\";\nimport { getUserById } from \"./redux/actions/auth\";\n\nfunction App() {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    const token = localStorage.getItem(\"token\");\n    if (token) {\n      dispatch(getUserById());\n    }\n  }, []);\n  return (\n    <div className=\"App\">\n      <BrowserRouter forceRefresh={false}>\n        <Routes />\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","/home/milan/Milan/Projects/typescript-poc/client/src/routes.tsx",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/index.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/components/LogIn.tsx",["114","115"],"import React, { useReducer, useEffect } from \"react\";\nimport { createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginSchema } from \"../utils/yup\";\nimport { loginAction } from \"../redux/actions/auth\";\nimport { setActiveUserAction } from \"../redux/actions/user\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      width: 400,\n      margin: `${theme.spacing(0)} auto`,\n    },\n    loginBtn: {\n      marginTop: theme.spacing(2),\n      flexGrow: 1,\n    },\n    header: {\n      textAlign: \"center\",\n      background: \"#212121\",\n      color: \"#fff\",\n    },\n    card: {\n      marginTop: theme.spacing(10),\n    },\n  })\n);\n\n//state type\n\ntype State = {\n  email: string;\n  password: string;\n};\n\nconst Login = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const isAuthenticated = useSelector(({ auth }: any) => auth);\n\n  const initialValues: State = {\n    email: \"\",\n    password: \"\",\n  };\n\n  useEffect(() => {\n    if (isAuthenticated.isAuthenticated) {\n      if (isAuthenticated.user.userType === \"ADMIN\") {\n        props.history.push(\"/dashboard\");\n      } else {\n        dispatch(setActiveUserAction(isAuthenticated.user));\n\n        props.history.push(`/update/${isAuthenticated.user._id}`);\n      }\n    }\n  }, [isAuthenticated]);\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: loginSchema,\n    onSubmit: (values) => {\n      dispatch(loginAction(values));\n    },\n  });\n\n  return (\n    <form className={classes.container} onSubmit={formik.handleSubmit}>\n      <Card className={classes.card}>\n        <CardHeader className={classes.header} title=\"Login App\" />\n        <CardContent>\n          <div>\n            <TextField\n              fullWidth\n              id=\"email\"\n              type=\"email\"\n              label=\"email\"\n              placeholder=\"email\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              helperText={formik.errors.email}\n              margin=\"normal\"\n            />\n            <TextField\n              fullWidth\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              placeholder=\"Password\"\n              margin=\"normal\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n              helperText={formik.errors.password}\n            />\n          </div>\n        </CardContent>\n\n        <CardActions>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            color=\"secondary\"\n            className={classes.loginBtn}\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </CardActions>\n\n        <Link to=\"/register\">\n          <Typography variant=\"caption\">Already Register!!</Typography>\n        </Link>\n      </Card>\n    </form>\n  );\n};\n\nexport default Login;\n","/home/milan/Milan/Projects/typescript-poc/client/src/components/Register.tsx",["116"],"import React, { useState, useEffect, Dispatch } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport { useFormik } from \"formik\";\nimport { registerSchema } from \"../utils/yup\";\nimport { registerAction } from \"../redux/actions/auth\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      width: 400,\n      margin: `${theme.spacing(0)} auto`,\n    },\n    registerBtn: {\n      marginTop: theme.spacing(2),\n      flexGrow: 1,\n    },\n    header: {\n      textAlign: \"center\",\n      background: \"#212121\",\n      color: \"#fff\",\n    },\n    card: {\n      marginTop: theme.spacing(10),\n    },\n  })\n);\n\ninterface Values {\n  firstName: string;\n  email: string;\n  mobileNumber: string;\n  address: string;\n  password: string;\n  confirmPassword: string;\n  description: string;\n  userImage: string;\n}\n\nconst Register: React.FC = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch<Dispatch<any>>();\n  const [userImage, setUserImage] = useState(\"\");\n\n  const handleImage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files) {\n      return;\n    }\n    const file = e.target.files[0];\n\n    const reader = new FileReader();\n\n    reader.onload = function (dataa: any) {\n      let dataURL = dataa.target.result;\n      dataURL = dataURL.replace(\";base64\", `;name=${file.name};base64`);\n      setUserImage(dataURL);\n\n      // setData({\n      // \t...data,\n      // \tuserImage: dataURL,\n      // });\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  const initialValues = {\n    firstName: \"\",\n    email: \"\",\n    mobileNumber: \"\",\n    address: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    description: \"\",\n  };\n  const formik: any = useFormik<any>({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: (values: Values) => {\n      let payload = { ...values, userImage: userImage };\n      dispatch(\n        registerAction(payload, () => {\n          props.history.push(\"/\");\n        })\n      );\n    },\n  });\n  \n  return (\n    <form className={classes.container} onSubmit={formik.handleSubmit}>\n      <Card className={classes.card}>\n        <CardHeader className={classes.header} title=\"REGISTER\" />\n        <CardContent>\n          <div>\n            <TextField\n              fullWidth\n              id=\"firstName\"\n              type=\"text\"\n              label=\"firstName\"\n              placeholder=\"firstName\"\n              margin=\"normal\"\n              value={formik.values.firstName}\n              onChange={formik.handleChange}\n              helperText={formik.errors.firstName}\n            />\n            <TextField\n              fullWidth\n              id=\"email\"\n              type=\"email\"\n              label=\"email\"\n              placeholder=\"email\"\n              margin=\"normal\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              helperText={formik.errors.email}\n            />\n            <TextField\n              fullWidth\n              id=\"mobileNumber\"\n              type=\"text\"\n              label=\"Mobile Number\"\n              placeholder=\"Mobile Number\"\n              margin=\"normal\"\n              value={formik.values.mobileNumber}\n              onChange={formik.handleChange}\n              helperText={formik.errors.mobileNumber}\n            />\n            <TextField\n              fullWidth\n              id=\"address\"\n              type=\"text\"\n              label=\"Address\"\n              placeholder=\"Address\"\n              margin=\"normal\"\n              value={formik.values.address}\n              onChange={formik.handleChange}\n              helperText={formik.errors.address}\n            />\n            <TextField\n              fullWidth\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              placeholder=\"Password\"\n              margin=\"normal\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n              helperText={formik.errors.password}\n            />\n            <TextField\n              fullWidth\n              id=\"confirmPassword\"\n              type=\"password\"\n              label=\"Confirm password\"\n              placeholder=\"Confirm password\"\n              margin=\"normal\"\n              value={formik.values.confirmPassword}\n              onChange={formik.handleChange}\n              helperText={formik.errors.confirmPassword}\n            />\n            <TextField\n              fullWidth\n              id=\"description\"\n              type=\"text\"\n              label=\"Description\"\n              placeholder=\"Description\"\n              margin=\"normal\"\n              value={formik.values.description}\n              onChange={formik.handleChange}\n              helperText={formik.errors.description}\n            />\n          </div>\n          <input\n            id=\"userImage\"\n            name=\"userImage\"\n            type=\"file\"\n            accept=\"image/*\"\n            // onChange={(event: any) => {\n            //   formik.setFieldValue(\"image\", event.currentTarget.files[0]);\n            // }}\n            onChange={handleImage}\n          />\n          {userImage && <img width=\"100%\" src={userImage} alt=\"\" />}\n        </CardContent>\n\n        <CardActions>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            color=\"secondary\"\n            className={classes.registerBtn}\n            type=\"submit\"\n          >\n            REGISTER\n          </Button>\n        </CardActions>\n        <Link to=\"/\">\n          <Typography variant=\"caption\">LOGIN PAGE</Typography>\n        </Link>\n      </Card>\n    </form>\n  );\n  //   }}\n  // </Formik>\n  //   );\n};\n\nexport default Register;\n","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/authReducer.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/userReducer.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/auth.ts",["117"],"import { Dispatch } from \"redux\";\nimport axios from \"../../api/axios\";\nimport { IAction, IUser, IConfigHeaders } from \"../../utils/interfaces\";\nimport {\n  LOGIN_SUCCESS,\n  REGISTER_SUCCESS,\n  REGISTER_FAIL,\n  LOGOUT,\n  LOGIN_FAIL,\n  USER_LOADING,\n  USER_LOADED,\n  AUTH_ERROR,\n} from \"./types\";\nimport { returnErrors } from \"./error\";\n\nexport const loginAction =\n  (payload: Object) => (dispatch: Dispatch<IAction>) => {\n    try {\n      const data = JSON.stringify({ ...payload });\n      axios({\n        method: \"post\",\n        url: \"/login\",\n        data,\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      })\n        .then((res) =>\n          dispatch({\n            type: LOGIN_SUCCESS,\n            payload: res,\n          })\n        )\n        .catch((err) => {\n          dispatch(\n            returnErrors({ msg: err.data?.message }, err.status, \"LOGIN_FAIL\")\n          );\n          dispatch({\n            type: LOGIN_FAIL,\n          });\n        });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\nexport const registerAction =\n  (payload: object, cb: Function) => (dispatch: Dispatch<IAction>) => {\n    try {\n      const data = JSON.stringify({ ...payload });\n      console.log(data, \"payloadd\");\n\n      axios({\n        method: \"post\",\n        url: \"/signup\",\n        data,\n        headers: {\n          \"Content-type\": \"application/json\",\n        },\n      })\n        .then(\n          (res) =>\n            dispatch({\n              type: REGISTER_SUCCESS,\n              payload: res,\n            }),\n          cb()\n        )\n        .catch((err) => {\n          dispatch(\n            returnErrors(\n              { msg: err.data?.message },\n              err.status,\n              \"REGISTER_FAIL\"\n            )\n          );\n          dispatch({\n            type: REGISTER_FAIL,\n          });\n        });\n\n      // await Api.apiPost(\"signUp\", payload)\n      // cb();\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\nexport const tokenConfig = (getState: Function) => {\n  // Get token from localstorage\n  const token = getState().auth.token;\n\n  // Headers\n  const config: IConfigHeaders = {\n    headers: {\n      \"Content-type\": \"application/json\",\n    },\n  };\n\n  // If token, add to headers\n  if (token) {\n    config.headers[\"authorization\"] = `Bearer ${token}`;\n  }\n\n  return config;\n};\n\nexport const logoutAction: () => void =\n  () => async (dispatch: Dispatch<IAction>) => {\n    try {\n      localStorage.removeItem(\"token\");\n      dispatch({ type: LOGOUT });\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\nexport const getUserById =\n  (_id?: string) => (dispatch: Dispatch<IAction>, getState: Function) => {\n    // User loading\n    dispatch({ type: USER_LOADING });\n\n    axios({\n      method: \"get\",\n      url: \"/getUser\",\n      params: {\n        _id: _id || \"\",\n      },\n      ...tokenConfig(getState),\n    })\n      .then((res: any) => {\n        dispatch({\n          type: USER_LOADED,\n          payload: res.user,\n        });\n\n        dispatch(returnErrors({ msg: \"User loaded successfully\" }, 200));\n      })\n      .catch((err) => {\n        dispatch(returnErrors({ msg: err.data?.message }, err.status));\n        dispatch({\n          type: AUTH_ERROR,\n        });\n      });\n  };\n\nexport const editUserAction =\n  ({\n    firstName,\n    email,\n    lastName,\n    address,\n    mobileNumber,\n    userImage,\n    description,\n    _id,\n  }: any) =>\n  (dispatch: Dispatch<IAction>, getState: Function) => {\n    // Headers\n\n    // Request body\n    const data = JSON.stringify({\n      firstName,\n      email,\n      lastName,\n      address,\n      mobileNumber,\n      userImage,\n      description,\n      userId: _id,\n    });\n\n    axios({\n      method: \"post\",\n      url: \"/editUser\",\n      data,\n      ...tokenConfig(getState),\n    })\n      .then((res: any) => {\n        dispatch({\n          type: USER_LOADED,\n          payload: res.user,\n        });\n\n        dispatch(returnErrors({ msg: \"User edited successfully\" }, 200));\n      })\n      .catch((err) => {\n        dispatch(\n          returnErrors({ msg: err.data?.message }, err.status, \"EDIT_FAIL\")\n        );\n      });\n  };\n","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/types.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/api/index.ts",[],["118","119"],"/home/milan/Milan/Projects/typescript-poc/client/src/api/config.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/api/keys.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/services.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/api/axios.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/error.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/utils/yup.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/components/Dashboard.tsx",["120","121","122"],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/user.ts",["123","124"],"import { Dispatch } from \"redux\";\nimport { IAction, IUser } from \"../../utils/interfaces\";\nimport { GET_USERS, SET_ACTIVE_USER, DELETE_USER, USER_LOADED } from \"./types\";\nimport { tokenConfig } from \"./auth\";\nimport axios from \"../../api/axios\";\nimport { returnErrors } from \"./error\";\n\nexport const getUsers =\n  () => (dispatch: Dispatch<IAction>, getState: Function) => {\n    axios({\n      method: \"get\",\n      url: \"/getUserList\",\n      ...tokenConfig(getState),\n    })\n      // .get('/api/items')\n      .then((res) =>\n        dispatch({\n          type: GET_USERS,\n          payload: res,\n        })\n      )\n      .catch((err) =>\n        dispatch(returnErrors({ msg: err.data?.message }, err.status))\n      );\n  };\n\nexport const setActiveUserAction: (a: any) => void =\n  (payload: any) => async (dispatch: any) => {\n    dispatch({ type: SET_ACTIVE_USER, payload });\n  };\n\nexport const deleteUserAction =\n  (_id: string) => (dispatch: Dispatch<IAction>, getState: Function) => {\n    try {\n      axios({\n        method: \"get\",\n        url: \"/deleteUser\",\n        params: { _id },\n        ...tokenConfig(getState),\n      })\n        // .delete(`/api/items/${id}`, tokenConfig(getState))\n        .then((res) =>\n          dispatch({\n            type: DELETE_USER,\n            payload: _id,\n          })\n        )\n        .catch((err) =>\n          dispatch(returnErrors({ msg: err.data?.message }, err.status))\n        );\n      // const res:AxiosResponse<any> = await Api.apiDelete(\"users\", args)\n      //   dispatch(usersListAction());\n    } catch (err) {\n      console.log(err);\n    }\n  };\n","/home/milan/Milan/Projects/typescript-poc/client/src/ProtectedRoute.tsx",[],"/home/milan/Milan/Projects/typescript-poc/client/src/components/UserDashboard.tsx",["125","126"],"import React, { useState, useEffect, Dispatch } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { createStyles, makeStyles, Theme } from \"@material-ui/core\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport { useFormik } from \"formik\";\nimport { userSchema } from \"../utils/yup\";\nimport { editUserAction, logoutAction } from \"../redux/actions/auth\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      width: 400,\n      margin: `${theme.spacing(0)} auto`,\n    },\n    registerBtn: {\n      marginTop: theme.spacing(2),\n      flexGrow: 1,\n    },\n    header: {\n      textAlign: \"center\",\n      background: \"#212121\",\n      color: \"#fff\",\n    },\n    card: {\n      marginTop: theme.spacing(10),\n    },\n  })\n);\n\ninterface Values {\n  firstName: string;\n  email: string;\n  mobileNumber: string;\n  address: string;\n  description: string;\n  userImage: string;\n}\n\nconst UserDashboard: React.FC = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch<Dispatch<any>>();\n  const [userImage, setUserImage] = useState(\"\");\n  const [isEdit, setIsEdit] = useState<any>(false);\n  const selectedUser = useSelector(({ users }: any) => users.activeUser);\n\n  useEffect(() => {\n    if (props.location.pathname.includes(\"update\")) {\n      setIsEdit(true);\n    }\n    if (!selectedUser) {\n      const id = props.match.params.userId;\n    }\n    if (selectedUser?.userImage) {\n      setUserImage(selectedUser.userImage);\n    }\n  }, [selectedUser]);\n\n  const handleImage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files) {\n      return;\n    }\n    const file = e.target.files[0];\n\n    const reader = new FileReader();\n\n    reader.onload = function (dataa: any) {\n      let dataURL = dataa.target.result;\n      dataURL = dataURL.replace(\";base64\", `;name=${file.name};base64`);\n      setUserImage(dataURL);\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  const initialValues = {\n    _id: selectedUser?._id || \"\",\n    firstName: selectedUser?.firstName || \"\",\n    email: selectedUser?.email || \"\",\n    mobileNumber: selectedUser?.mobileNumber || \"\",\n    address: selectedUser?.address || \"\",\n    description: selectedUser?.description || \"\",\n  };\n  const formik: any = useFormik<any>({\n    initialValues: initialValues,\n    validationSchema: userSchema,\n    onSubmit: (values: Values) => {\n      let payload = { ...values, userImage: userImage };\n      dispatch(editUserAction(payload));\n    },\n  });\n  return (\n    <>\n      <div>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => {\n            dispatch(logoutAction());\n            props.history.push(\"/\");\n          }}\n        >\n          LOGOUT\n        </Button>\n      </div>\n      <form className={classes.container} onSubmit={formik.handleSubmit}>\n        <Card className={classes.card}>\n          <CardHeader className={classes.header} title=\"USER DETAILS\" />\n          <CardContent>\n            <div>\n              <TextField\n                fullWidth\n                id=\"firstName\"\n                type=\"text\"\n                label=\"firstName\"\n                placeholder=\"firstName\"\n                margin=\"normal\"\n                value={formik.values.firstName}\n                onChange={formik.handleChange}\n                helperText={formik.errors.firstName}\n                disabled={!isEdit}\n              />\n              <TextField\n                fullWidth\n                id=\"email\"\n                type=\"email\"\n                label=\"email\"\n                placeholder=\"email\"\n                margin=\"normal\"\n                value={formik.values.email}\n                onChange={formik.handleChange}\n                helperText={formik.errors.email}\n                disabled={!isEdit}\n              />\n              <TextField\n                fullWidth\n                id=\"mobileNumber\"\n                type=\"text\"\n                label=\"Mobile Number\"\n                placeholder=\"Mobile Number\"\n                margin=\"normal\"\n                value={formik.values.mobileNumber}\n                onChange={formik.handleChange}\n                helperText={formik.errors.mobileNumber}\n                disabled={!isEdit}\n              />\n              <TextField\n                fullWidth\n                id=\"address\"\n                type=\"text\"\n                label=\"Address\"\n                placeholder=\"Address\"\n                margin=\"normal\"\n                value={formik.values.address}\n                onChange={formik.handleChange}\n                helperText={formik.errors.address}\n                disabled={!isEdit}\n              />\n\n              <TextField\n                fullWidth\n                id=\"description\"\n                type=\"text\"\n                label=\"Description\"\n                placeholder=\"Description\"\n                margin=\"normal\"\n                value={formik.values.description}\n                onChange={formik.handleChange}\n                helperText={formik.errors.description}\n                disabled={!isEdit}\n              />\n            </div>\n            {isEdit && (\n              <input\n                id=\"userImage\"\n                name=\"userImage\"\n                type=\"file\"\n                accept=\"image/*\"\n                onChange={handleImage}\n              />\n            )}\n            {userImage && <img width=\"100%\" src={userImage} alt=\"\" />}\n          </CardContent>\n\n          {isEdit ? (\n            <CardActions>\n              <Button\n                variant=\"contained\"\n                size=\"large\"\n                color=\"secondary\"\n                className={classes.registerBtn}\n                type=\"submit\"\n              >\n                Update\n              </Button>\n            </CardActions>\n          ) : (\n            <div></div>\n            //   <CardActions>\n            //     <Button\n            //       variant=\"contained\"\n            //       size=\"large\"\n            //       color=\"secondary\"\n            //       className={classes.registerBtn}\n            //       onClick={() => props.history.push(`/update/${formik.values._id}`)}\n            //     >\n            //       Want to update\n            //     </Button>\n            //   </CardActions>\n          )}\n        </Card>\n      </form>\n    </>\n  );\n  //   }}\n  // </Formik>\n  //   );\n};\n\nexport default UserDashboard;\n","/home/milan/Milan/Projects/typescript-poc/client/src/components/Modal.tsx",["127","128"],"import React, { useEffect } from \"react\";\nimport { makeStyles, Theme, createStyles } from \"@material-ui/core/styles\";\nimport { Alert } from \"@material-ui/lab\";\nimport { connect } from \"react-redux\";\n\nimport { IRootState, IAlertProps } from \"../utils/interfaces\";\nimport { clearErrors } from \"../redux/actions/error\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  root: {\n    zIndex: theme.zIndex.snackbar,\n    position: \"absolute\",\n    top: \"72px\",\n    right: 0,\n\n    width: \"300px\",\n    \"& > * + *\": {\n      marginTop: theme.spacing(2),\n    },\n  },\n}));\n\nconst Modal: React.FC<IAlertProps> = ({ error, clearErrors }) => {\n  const classes = useStyles();\n\n  useEffect(() => {\n    let timeout = setTimeout(() => {\n      clearErrors();\n    }, 2000);\n    return () => {\n      clearTimeout(timeout);\n    };\n  }, []);\n\n  return (\n    <>\n      {error?.status && (\n        <div className={classes.root}>\n          {error?.status && +error.status > 400 ? (\n            <Alert onClose={clearErrors} severity=\"error\">\n              {error.msg?.msg || error.msg}\n            </Alert>\n          ) : (\n            <Alert onClose={clearErrors} severity=\"success\">\n              {error.msg?.msg || error.msg}\n            </Alert>\n          )}\n        </div>\n      )}\n    </>\n  );\n};\n\nconst mapStateToProps = (state: IRootState) => ({\n  error: state.error,\n});\n\nexport default connect(mapStateToProps, { clearErrors })(Modal);\n","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/errorReducer.ts",[],{"ruleId":"129","replacedBy":"130"},{"ruleId":"131","replacedBy":"132"},{"ruleId":"133","severity":1,"message":"134","line":15,"column":6,"nodeType":"135","endLine":15,"endColumn":8,"suggestions":"136"},{"ruleId":"137","severity":1,"message":"138","line":1,"column":17,"nodeType":"139","messageId":"140","endLine":1,"endColumn":27},{"ruleId":"133","severity":1,"message":"141","line":68,"column":6,"nodeType":"135","endLine":68,"endColumn":23,"suggestions":"142"},{"ruleId":"137","severity":1,"message":"143","line":1,"column":27,"nodeType":"139","messageId":"140","endLine":1,"endColumn":36},{"ruleId":"137","severity":1,"message":"144","line":3,"column":19,"nodeType":"139","messageId":"140","endLine":3,"endColumn":24},{"ruleId":"129","replacedBy":"145"},{"ruleId":"131","replacedBy":"146"},{"ruleId":"137","severity":1,"message":"147","line":1,"column":27,"nodeType":"139","messageId":"140","endLine":1,"endColumn":35},{"ruleId":"137","severity":1,"message":"148","line":34,"column":9,"nodeType":"139","messageId":"140","endLine":34,"endColumn":24},{"ruleId":"133","severity":1,"message":"134","line":41,"column":6,"nodeType":"135","endLine":41,"endColumn":8,"suggestions":"149"},{"ruleId":"137","severity":1,"message":"144","line":2,"column":19,"nodeType":"139","messageId":"140","endLine":2,"endColumn":24},{"ruleId":"137","severity":1,"message":"150","line":3,"column":51,"nodeType":"139","messageId":"140","endLine":3,"endColumn":62},{"ruleId":"137","severity":1,"message":"151","line":59,"column":13,"nodeType":"139","messageId":"140","endLine":59,"endColumn":15},{"ruleId":"133","severity":1,"message":"152","line":64,"column":6,"nodeType":"135","endLine":64,"endColumn":20,"suggestions":"153"},{"ruleId":"137","severity":1,"message":"154","line":2,"column":29,"nodeType":"139","messageId":"140","endLine":2,"endColumn":41},{"ruleId":"133","severity":1,"message":"155","line":33,"column":6,"nodeType":"135","endLine":33,"endColumn":8,"suggestions":"156"},"no-native-reassign",["157"],"no-negated-in-lhs",["158"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["159"],"@typescript-eslint/no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'dispatch' and 'props.history'. Either include them or remove the dependency array.",["160"],"'useEffect' is defined but never used.","'IUser' is defined but never used.",["157"],["158"],"'useState' is defined but never used.","'isAuthenticated' is assigned a value but never used.",["161"],"'USER_LOADED' is defined but never used.","'id' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.location.pathname' and 'props.match.params.userId'. Either include them or remove the dependency array.",["162"],"'createStyles' is defined but never used.","React Hook useEffect has a missing dependency: 'clearErrors'. Either include it or remove the dependency array. If 'clearErrors' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["163"],"no-global-assign","no-unsafe-negation",{"desc":"164","fix":"165"},{"desc":"166","fix":"167"},{"desc":"164","fix":"168"},{"desc":"169","fix":"170"},{"desc":"171","fix":"172"},"Update the dependencies array to be: [dispatch]",{"range":"173","text":"174"},"Update the dependencies array to be: [dispatch, isAuthenticated, props.history]",{"range":"175","text":"176"},{"range":"177","text":"174"},"Update the dependencies array to be: [props.location.pathname, props.match.params.userId, selectedUser]",{"range":"178","text":"179"},"Update the dependencies array to be: [clearErrors]",{"range":"180","text":"181"},[411,413],"[dispatch]",[1802,1819],"[dispatch, isAuthenticated, props.history]",[1353,1355],[1809,1823],"[props.location.pathname, props.match.params.userId, selectedUser]",[814,816],"[clearErrors]"]