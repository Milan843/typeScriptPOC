[{"/home/milan/Milan/Projects/typescript-poc/client/src/index.tsx":"1","/home/milan/Milan/Projects/typescript-poc/client/src/reportWebVitals.ts":"2","/home/milan/Milan/Projects/typescript-poc/client/src/redux/store.ts":"3","/home/milan/Milan/Projects/typescript-poc/client/src/App.tsx":"4","/home/milan/Milan/Projects/typescript-poc/client/src/routes.tsx":"5","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/index.ts":"6","/home/milan/Milan/Projects/typescript-poc/client/src/components/LogIn.tsx":"7","/home/milan/Milan/Projects/typescript-poc/client/src/components/Register.tsx":"8","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/authReducer.ts":"9","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/userReducer.ts":"10","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/auth.ts":"11","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/types.ts":"12","/home/milan/Milan/Projects/typescript-poc/client/src/api/index.ts":"13","/home/milan/Milan/Projects/typescript-poc/client/src/api/config.ts":"14","/home/milan/Milan/Projects/typescript-poc/client/src/api/keys.ts":"15","/home/milan/Milan/Projects/typescript-poc/client/src/services.ts":"16","/home/milan/Milan/Projects/typescript-poc/client/src/api/axios.ts":"17","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/error.ts":"18","/home/milan/Milan/Projects/typescript-poc/client/src/utils/yup.ts":"19","/home/milan/Milan/Projects/typescript-poc/client/src/components/Dashboard.tsx":"20","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/user.ts":"21","/home/milan/Milan/Projects/typescript-poc/client/src/ProtectedRoute.tsx":"22","/home/milan/Milan/Projects/typescript-poc/client/src/components/UserDashboard.tsx":"23","/home/milan/Milan/Projects/typescript-poc/client/src/components/Modal.tsx":"24"},{"size":627,"mtime":1625120689224,"results":"25","hashOfConfig":"26"},{"size":425,"mtime":1624885382313,"results":"27","hashOfConfig":"26"},{"size":510,"mtime":1625032879837,"results":"28","hashOfConfig":"26"},{"size":304,"mtime":1625122446264,"results":"29","hashOfConfig":"26"},{"size":773,"mtime":1625221292889,"results":"30","hashOfConfig":"26"},{"size":295,"mtime":1625033155764,"results":"31","hashOfConfig":"26"},{"size":3544,"mtime":1625220707915,"results":"32","hashOfConfig":"26"},{"size":7103,"mtime":1625168335797,"results":"33","hashOfConfig":"26"},{"size":1050,"mtime":1625209139450,"results":"34","hashOfConfig":"26"},{"size":787,"mtime":1625222214668,"results":"35","hashOfConfig":"26"},{"size":3464,"mtime":1625222389675,"results":"36","hashOfConfig":"26"},{"size":600,"mtime":1625210371345,"results":"37","hashOfConfig":"26"},{"size":1404,"mtime":1625124748718,"results":"38","hashOfConfig":"26"},{"size":391,"mtime":1625135300750,"results":"39","hashOfConfig":"26"},{"size":126,"mtime":1625089201129,"results":"40","hashOfConfig":"26"},{"size":308,"mtime":1625089073304,"results":"41","hashOfConfig":"26"},{"size":536,"mtime":1625135322972,"results":"42","hashOfConfig":"26"},{"size":424,"mtime":1625135877405,"results":"43","hashOfConfig":"26"},{"size":1018,"mtime":1625205297324,"results":"44","hashOfConfig":"26"},{"size":4686,"mtime":1625222314886,"results":"45","hashOfConfig":"26"},{"size":2611,"mtime":1625222034824,"results":"46","hashOfConfig":"26"},{"size":654,"mtime":1625171385033,"results":"47","hashOfConfig":"26"},{"size":6896,"mtime":1625212409323,"results":"48","hashOfConfig":"26"},{"size":419,"mtime":1625219667229,"results":"49","hashOfConfig":"26"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},"a3anev",{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"65","usedDeprecatedRules":"52"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"52"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"73","messages":"74","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"82","messages":"83","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"79"},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"94","usedDeprecatedRules":"52"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"97","messages":"98","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"52"},{"filePath":"99","messages":"100","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"101","usedDeprecatedRules":"52"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"104"},"/home/milan/Milan/Projects/typescript-poc/client/src/index.tsx",[],["105","106"],"/home/milan/Milan/Projects/typescript-poc/client/src/reportWebVitals.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/store.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/App.tsx",[],"/home/milan/Milan/Projects/typescript-poc/client/src/routes.tsx",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/index.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/components/LogIn.tsx",["107","108","109"],"import React, { useReducer, useEffect } from \"react\";\nimport { createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\nimport { Link } from \"react-router-dom\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport { useFormik } from \"formik\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { loginSchema } from \"../utils/yup\";\nimport { loginAction } from \"../redux/actions/auth\";\nimport { setActiveUserAction } from \"../redux/actions/user\";\nimport { IRootState } from \"../redux/reducers/index\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      width: 400,\n      margin: `${theme.spacing(0)} auto`,\n    },\n    loginBtn: {\n      marginTop: theme.spacing(2),\n      flexGrow: 1,\n    },\n    header: {\n      textAlign: \"center\",\n      background: \"#212121\",\n      color: \"#fff\",\n    },\n    card: {\n      marginTop: theme.spacing(10),\n    },\n  })\n);\n\n//state type\n\ntype State = {\n  email: string;\n  password: string;\n};\n\nconst Login = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch();\n\n  const isAuthenticated = useSelector(({ auth }: any) => auth);\n  console.log(isAuthenticated, \"Authentication\");\n\n  const initialValues: State = {\n    email: \"\",\n    password: \"\",\n  };\n\n  useEffect(() => {\n    if (isAuthenticated.isAuthenticated) {\n      if (isAuthenticated.user.userType === \"USER\") {\n        dispatch(setActiveUserAction(isAuthenticated.user));\n\n        props.history.push(`/view/${isAuthenticated.user._id}`);\n      } else {\n        props.history.push(\"/dashboard\");\n      }\n    }\n  }, [isAuthenticated]);\n\n  const formik = useFormik({\n    initialValues: initialValues,\n    validationSchema: loginSchema,\n    onSubmit: (values) => {\n      console.log(values, \"val\");\n      dispatch(loginAction(values));\n    },\n  });\n\n  return (\n    <form className={classes.container} onSubmit={formik.handleSubmit}>\n      <Card className={classes.card}>\n        <CardHeader className={classes.header} title=\"Login App\" />\n        <CardContent>\n          <div>\n            <TextField\n              fullWidth\n              id=\"email\"\n              type=\"email\"\n              label=\"email\"\n              placeholder=\"email\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              helperText={formik.errors.email}\n              margin=\"normal\"\n            />\n            <TextField\n              fullWidth\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              placeholder=\"Password\"\n              margin=\"normal\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n              helperText={formik.errors.password}\n            />\n          </div>\n        </CardContent>\n\n        <CardActions>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            color=\"secondary\"\n            className={classes.loginBtn}\n            type=\"submit\"\n          >\n            Login\n          </Button>\n        </CardActions>\n\n        <Link to=\"/register\">\n          <Typography variant=\"caption\">Already Register!!</Typography>\n        </Link>\n      </Card>\n    </form>\n  );\n};\n\nexport default Login;\n","/home/milan/Milan/Projects/typescript-poc/client/src/components/Register.tsx",["110"],"import React, { useState, useEffect, Dispatch } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport { useFormik } from \"formik\";\nimport { registerSchema } from \"../utils/yup\";\nimport { registerAction } from \"../redux/actions/auth\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      width: 400,\n      margin: `${theme.spacing(0)} auto`,\n    },\n    registerBtn: {\n      marginTop: theme.spacing(2),\n      flexGrow: 1,\n    },\n    header: {\n      textAlign: \"center\",\n      background: \"#212121\",\n      color: \"#fff\",\n    },\n    card: {\n      marginTop: theme.spacing(10),\n    },\n  })\n);\n\ninterface Values {\n  firstName: string;\n  email: string;\n  mobileNumber: string;\n  address: string;\n  password: string;\n  confirmPassword: string;\n  description: string;\n  userImage: string;\n}\n\nconst Register: React.FC = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch<Dispatch<any>>();\n  const [userImage, setUserImage] = useState(\"\");\n\n  const handleImage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files) {\n      return;\n    }\n    const file = e.target.files[0];\n    // const isValidFile = isUserImage(file);\n    // if (!isValidFile) {\n    //   setFormError({\n    //     ...formError,\n    //     userImage: { isValid: false, errorMsg: \"Enter valid image\" },\n    //     isFormValid: false,\n    //   });\n\n    //   return;\n    // }\n    // setFormError({\n    //   ...formError,\n    //   userImage: { isValid: true, errorMsg: \"Enter valid image\" },\n    //   isFormValid: true,\n    // });\n\n    const reader = new FileReader();\n\n    reader.onload = function (dataa: any) {\n      let dataURL = dataa.target.result;\n      dataURL = dataURL.replace(\";base64\", `;name=${file.name};base64`);\n      setUserImage(dataURL);\n\n      // setData({\n      // \t...data,\n      // \tuserImage: dataURL,\n      // });\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  const initialValues = {\n    firstName: \"\",\n    email: \"\",\n    mobileNumber: \"\",\n    address: \"\",\n    password: \"\",\n    confirmPassword: \"\",\n    description: \"\",\n  };\n  const formik: any = useFormik<any>({\n    initialValues: initialValues,\n    validationSchema: registerSchema,\n    onSubmit: (values: Values) => {\n      let payload = { ...values, userImage: userImage };\n      dispatch(\n        registerAction(payload, () => {\n          props.history.push(\"/\");\n        })\n      );\n      console.log(payload, \"submit\");\n    },\n  });\n  //   return (\n  //     <Formik\n  //       key=\"registerForm\"\n  //       initialValues={initialValues}\n  //       //   validationSchema={registerSchema}\n  //       validator={() => ({})}\n  //       onSubmit={(values: Values, { setSubmitting }: FormikHelpers<Values>) => {\n  //         setTimeout(() => {\n  //           alert(JSON.stringify(values, null, 2));\n  //           setSubmitting(false);\n  //         }, 500);\n  //       }}\n  //     >\n  //       {(props) => {\n  console.log(formik);\n  return (\n    <form className={classes.container} onSubmit={formik.handleSubmit}>\n      <Card className={classes.card}>\n        <CardHeader className={classes.header} title=\"REGISTER\" />\n        <CardContent>\n          <div>\n            <TextField\n              fullWidth\n              id=\"firstName\"\n              type=\"text\"\n              label=\"firstName\"\n              placeholder=\"firstName\"\n              margin=\"normal\"\n              value={formik.values.firstName}\n              onChange={formik.handleChange}\n              helperText={formik.errors.firstName}\n            />\n            <TextField\n              fullWidth\n              id=\"email\"\n              type=\"email\"\n              label=\"email\"\n              placeholder=\"email\"\n              margin=\"normal\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              helperText={formik.errors.email}\n            />\n            <TextField\n              fullWidth\n              id=\"mobileNumber\"\n              type=\"text\"\n              label=\"Mobile Number\"\n              placeholder=\"Mobile Number\"\n              margin=\"normal\"\n              value={formik.values.mobileNumber}\n              onChange={formik.handleChange}\n              helperText={formik.errors.mobileNumber}\n            />\n            <TextField\n              fullWidth\n              id=\"address\"\n              type=\"text\"\n              label=\"Address\"\n              placeholder=\"Address\"\n              margin=\"normal\"\n              value={formik.values.address}\n              onChange={formik.handleChange}\n              helperText={formik.errors.address}\n            />\n            <TextField\n              fullWidth\n              id=\"password\"\n              type=\"password\"\n              label=\"Password\"\n              placeholder=\"Password\"\n              margin=\"normal\"\n              value={formik.values.password}\n              onChange={formik.handleChange}\n              helperText={formik.errors.password}\n            />\n            <TextField\n              fullWidth\n              id=\"confirmPassword\"\n              type=\"password\"\n              label=\"Confirm password\"\n              placeholder=\"Confirm password\"\n              margin=\"normal\"\n              value={formik.values.confirmPassword}\n              onChange={formik.handleChange}\n              helperText={formik.errors.confirmPassword}\n            />\n            <TextField\n              fullWidth\n              id=\"description\"\n              type=\"text\"\n              label=\"Description\"\n              placeholder=\"Description\"\n              margin=\"normal\"\n              value={formik.values.description}\n              onChange={formik.handleChange}\n              helperText={formik.errors.description}\n            />\n          </div>\n          <input\n            id=\"userImage\"\n            name=\"userImage\"\n            type=\"file\"\n            accept=\"image/*\"\n            // onChange={(event: any) => {\n            //   formik.setFieldValue(\"image\", event.currentTarget.files[0]);\n            // }}\n            onChange={handleImage}\n          />\n          {userImage && <img width=\"100%\" src={userImage} alt=\"\" />}\n        </CardContent>\n\n        <CardActions>\n          <Button\n            variant=\"contained\"\n            size=\"large\"\n            color=\"secondary\"\n            className={classes.registerBtn}\n            type=\"submit\"\n          >\n            REGISTER\n          </Button>\n        </CardActions>\n        <Link to=\"/\">\n          <Typography variant=\"caption\">LOGIN PAGE</Typography>\n        </Link>\n      </Card>\n    </form>\n  );\n  //   }}\n  // </Formik>\n  //   );\n};\n\nexport default Register;\n","/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/authReducer.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/reducers/userReducer.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/auth.ts",["111","112","113"],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/types.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/api/index.ts",[],["114","115"],"/home/milan/Milan/Projects/typescript-poc/client/src/api/config.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/api/keys.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/services.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/api/axios.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/error.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/utils/yup.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/components/Dashboard.tsx",["116","117","118","119","120","121","122"],"import React, { Dispatch, useState } from \"react\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport Table from \"@material-ui/core/Table\";\nimport TableBody from \"@material-ui/core/TableBody\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport TableContainer from \"@material-ui/core/TableContainer\";\nimport TableHead from \"@material-ui/core/TableHead\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { Box, Theme, IconButton } from \"@material-ui/core\";\nimport { useEffect } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport {\n  deleteUserAction,\n  usersListAction,\n  setActiveUserAction,\n} from \"../redux/actions/user\";\nimport { Delete, Edit, Visibility } from \"@material-ui/icons\";\nimport Modal from \"./Modal\";\nimport { getFromLocalStorage } from \"../services\";\nimport { USERS_LOADING } from \"../redux/actions/types\";\nimport { getUsers } from \"../redux/actions/user\";\nimport { IUserListDashBoard } from \"../utils/interfaces\";\n\nconst useStyles = makeStyles((theme: Theme) => ({\n  table: {\n    minWidth: 650,\n  },\n  dashboard_container: {\n    padding: theme.spacing(5),\n  },\n}));\n\nconst Dashboard = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch<Dispatch<any>>();\n  //   const [activeId, setActiveId] = useState(-1);\n  //   const [showModal, setShowModal] = useState(false);\n\n  //   const loggedInUser = JSON.parse(getFromLocalStorage(\"token\") || \"\");\n  const isAuthenticated = useSelector(({ auth }: any) => auth);\n\n  console.log(isAuthenticated, \"isAuthenticated\");\n  let allUsers: any[] = [];\n  allUsers = useSelector(({ users }: any) => users.users);\n  console.log(allUsers);\n\n  useEffect(() => {\n    dispatch(getUsers());\n  }, []);\n\n  const handleDelete = (_id: string) => {\n    dispatch(deleteUserAction(_id));\n\n    //   setActiveId(id);\n    //   toggleModal();\n  };\n\n  const handleView = (id: number, path: string) => {\n    let user = allUsers.find((item: any) => item._id === id);\n    dispatch(setActiveUserAction(user));\n    console.log(path, id, user, \"as\");\n    props.history.push(`/${path}/${id}`);\n  };\n\n  //   const toggleModal = () => {\n  //     setShowModal((prev: Boolean) => !prev);\n  //   };\n\n  //   const onConfirm = () => {\n  //     // dispatch(deleteUserAction(`/${activeId}`));\n  //     toggleModal();\n  //   };\n\n  return (\n    <>\n      <div>\n        <h1>ALL USERS</h1>\n      </div>\n      {/* <Modal\n        open={showModal}\n        message={\"Are you sure you want to delete this user ?\"}\n        onConfirm={onConfirm}\n        onCancel={toggleModal}\n        showActions={true}\n      /> */}\n      <Box className={classes.dashboard_container}>\n        <TableContainer component={Paper}>\n          <Table className={classes.table} aria-label=\"simple table\">\n            <TableHead>\n              <TableRow>\n                <TableCell>First Name</TableCell>\n                <TableCell align=\"left\">Email</TableCell>\n                <TableCell align=\"left\">Address</TableCell>\n                <TableCell align=\"left\">Actions</TableCell>\n              </TableRow>\n            </TableHead>\n            <TableBody>\n              {allUsers?.map((row: any) => (\n                <TableRow key={row._id}>\n                  <TableCell component=\"th\" scope=\"row\">\n                    {row.firstName}\n                  </TableCell>\n                  <TableCell align=\"left\">{row.email}</TableCell>\n                  <TableCell align=\"left\">{row.address}</TableCell>\n                  <TableCell align=\"left\">\n                    <IconButton\n                      color=\"primary\"\n                      size=\"small\"\n                      aria-label=\"upload picture\"\n                      onClick={() => handleView(row._id, \"update\")}\n                    >\n                      <Edit />\n                    </IconButton>\n\n                    <IconButton\n                      color=\"primary\"\n                      size=\"small\"\n                      aria-label=\"upload picture\"\n                      onClick={() => handleView(row._id, \"view\")}\n                    >\n                      <Visibility />\n                    </IconButton>\n                    <IconButton\n                      color=\"secondary\"\n                      size=\"small\"\n                      aria-label=\"upload picture\"\n                      onClick={() => handleDelete(row._id)}\n                    >\n                      <Delete />\n                    </IconButton>\n                  </TableCell>\n                </TableRow>\n              ))}\n            </TableBody>\n          </Table>\n        </TableContainer>\n      </Box>\n    </>\n  );\n};\n\nexport default Dashboard;\n","/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/user.ts",[],"/home/milan/Milan/Projects/typescript-poc/client/src/ProtectedRoute.tsx",[],"/home/milan/Milan/Projects/typescript-poc/client/src/components/UserDashboard.tsx",["123","124","125","126","127"],"import React, { useState, useEffect, Dispatch } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { createStyles, makeStyles, Theme, Typography } from \"@material-ui/core\";\n\nimport TextField from \"@material-ui/core/TextField\";\nimport Card from \"@material-ui/core/Card\";\nimport CardContent from \"@material-ui/core/CardContent\";\nimport CardActions from \"@material-ui/core/CardActions\";\nimport CardHeader from \"@material-ui/core/CardHeader\";\nimport Button from \"@material-ui/core/Button\";\nimport { useFormik } from \"formik\";\nimport { userSchema } from \"../utils/yup\";\nimport { registerAction } from \"../redux/actions/auth\";\nimport { getUsers } from \"../redux/actions/user\";\n\nconst useStyles = makeStyles((theme: Theme) =>\n  createStyles({\n    container: {\n      display: \"flex\",\n      flexWrap: \"wrap\",\n      width: 400,\n      margin: `${theme.spacing(0)} auto`,\n    },\n    registerBtn: {\n      marginTop: theme.spacing(2),\n      flexGrow: 1,\n    },\n    header: {\n      textAlign: \"center\",\n      background: \"#212121\",\n      color: \"#fff\",\n    },\n    card: {\n      marginTop: theme.spacing(10),\n    },\n  })\n);\n\ninterface Values {\n  firstName: string;\n  email: string;\n  mobileNumber: string;\n  address: string;\n  description: string;\n  userImage: string;\n}\n\nconst UserDashboard: React.FC = (props: any) => {\n  const classes = useStyles();\n  const dispatch = useDispatch<Dispatch<any>>();\n  const [userImage, setUserImage] = useState(\"\");\n  const [isEdit, setIsEdit] = useState<any>(false);\n  const selectedUser = useSelector(({ users }: any) => users.activeUser);\n\n  useEffect(() => {\n    if (props.location.pathname.includes(\"update\")) {\n      setIsEdit(true);\n    }\n    if (!selectedUser) {\n      const id = props.match.params.userId;\n      //   dispatch(getUserById(`/${id}`));\n    }\n  }, [selectedUser]);\n  console.log(selectedUser, \"selectedUser\");\n  const handleImage = (e: React.ChangeEvent<HTMLInputElement>) => {\n    if (!e.target.files) {\n      return;\n    }\n    const file = e.target.files[0];\n    // const isValidFile = isUserImage(file);\n    // if (!isValidFile) {\n    //   setFormError({\n    //     ...formError,\n    //     userImage: { isValid: false, errorMsg: \"Enter valid image\" },\n    //     isFormValid: false,\n    //   });\n\n    //   return;\n    // }\n    // setFormError({\n    //   ...formError,\n    //   userImage: { isValid: true, errorMsg: \"Enter valid image\" },\n    //   isFormValid: true,\n    // });\n\n    const reader = new FileReader();\n\n    reader.onload = function (dataa: any) {\n      let dataURL = dataa.target.result;\n      dataURL = dataURL.replace(\";base64\", `;name=${file.name};base64`);\n      setUserImage(dataURL);\n\n      // setData({\n      // \t...data,\n      // \tuserImage: dataURL,\n      // });\n    };\n\n    reader.readAsDataURL(file);\n  };\n\n  const initialValues = {\n    firstName: selectedUser.firstName || \"\",\n    email: selectedUser.email || \"\",\n    mobileNumber: selectedUser.mobileNumber || \"\",\n    address: selectedUser.address || \"\",\n    description: selectedUser.description || \"\",\n  };\n  const formik: any = useFormik<any>({\n    initialValues: initialValues,\n    validationSchema: userSchema,\n    onSubmit: (values: Values) => {\n      let payload = { ...values, userImage: userImage };\n      dispatch(\n        registerAction(payload, () => {\n          props.history.push(\"/\");\n        })\n      );\n      console.log(payload, \"submit\");\n    },\n  });\n  //   return (\n  //     <Formik\n  //       key=\"registerForm\"\n  //       initialValues={initialValues}\n  //       //   validationSchema={userSchema}\n  //       validator={() => ({})}\n  //       onSubmit={(values: Values, { setSubmitting }: FormikHelpers<Values>) => {\n  //         setTimeout(() => {\n  //           alert(JSON.stringify(values, null, 2));\n  //           setSubmitting(false);\n  //         }, 500);\n  //       }}\n  //     >\n  //       {(props) => {\n  console.log(formik);\n  return (\n    <form className={classes.container} onSubmit={formik.handleSubmit}>\n      <Card className={classes.card}>\n        <CardHeader className={classes.header} title=\"USER DETAILS\" />\n        <CardContent>\n          <div>\n            <TextField\n              fullWidth\n              id=\"firstName\"\n              type=\"text\"\n              label=\"firstName\"\n              placeholder=\"firstName\"\n              margin=\"normal\"\n              value={formik.values.firstName}\n              onChange={formik.handleChange}\n              helperText={formik.errors.firstName}\n              disabled={!isEdit}\n            />\n            <TextField\n              fullWidth\n              id=\"email\"\n              type=\"email\"\n              label=\"email\"\n              placeholder=\"email\"\n              margin=\"normal\"\n              value={formik.values.email}\n              onChange={formik.handleChange}\n              helperText={formik.errors.email}\n              disabled={!isEdit}\n            />\n            <TextField\n              fullWidth\n              id=\"mobileNumber\"\n              type=\"text\"\n              label=\"Mobile Number\"\n              placeholder=\"Mobile Number\"\n              margin=\"normal\"\n              value={formik.values.mobileNumber}\n              onChange={formik.handleChange}\n              helperText={formik.errors.mobileNumber}\n              disabled={!isEdit}\n            />\n            <TextField\n              fullWidth\n              id=\"address\"\n              type=\"text\"\n              label=\"Address\"\n              placeholder=\"Address\"\n              margin=\"normal\"\n              value={formik.values.address}\n              onChange={formik.handleChange}\n              helperText={formik.errors.address}\n              disabled={!isEdit}\n            />\n\n            <TextField\n              fullWidth\n              id=\"description\"\n              type=\"text\"\n              label=\"Description\"\n              placeholder=\"Description\"\n              margin=\"normal\"\n              value={formik.values.description}\n              onChange={formik.handleChange}\n              helperText={formik.errors.description}\n              disabled={!isEdit}\n            />\n          </div>\n          {isEdit && (\n            <input\n              id=\"userImage\"\n              name=\"userImage\"\n              type=\"file\"\n              accept=\"image/*\"\n              onChange={handleImage}\n            />\n          )}\n          {userImage && <img width=\"100%\" src={userImage} alt=\"\" />}\n        </CardContent>\n\n        {isEdit && (\n          <CardActions>\n            <Button\n              variant=\"contained\"\n              size=\"large\"\n              color=\"secondary\"\n              className={classes.registerBtn}\n              type=\"submit\"\n            >\n              Update\n            </Button>\n          </CardActions>\n        )}\n      </Card>\n    </form>\n  );\n  //   }}\n  // </Formik>\n  //   );\n};\n\nexport default UserDashboard;\n","/home/milan/Milan/Projects/typescript-poc/client/src/components/Modal.tsx",[],["128","129"],{"ruleId":"130","replacedBy":"131"},{"ruleId":"132","replacedBy":"133"},{"ruleId":"134","severity":1,"message":"135","line":1,"column":17,"nodeType":"136","messageId":"137","endLine":1,"endColumn":27},{"ruleId":"134","severity":1,"message":"138","line":16,"column":10,"nodeType":"136","messageId":"137","endLine":16,"endColumn":20},{"ruleId":"139","severity":1,"message":"140","line":70,"column":6,"nodeType":"141","endLine":70,"endColumn":23,"suggestions":"142"},{"ruleId":"134","severity":1,"message":"143","line":1,"column":27,"nodeType":"136","messageId":"137","endLine":1,"endColumn":36},{"ruleId":"134","severity":1,"message":"144","line":1,"column":10,"nodeType":"136","messageId":"137","endLine":1,"endColumn":23},{"ruleId":"134","severity":1,"message":"145","line":3,"column":8,"nodeType":"136","messageId":"137","endLine":3,"endColumn":11},{"ruleId":"134","severity":1,"message":"146","line":5,"column":10,"nodeType":"136","messageId":"137","endLine":5,"endColumn":25},{"ruleId":"130","replacedBy":"147"},{"ruleId":"132","replacedBy":"148"},{"ruleId":"134","severity":1,"message":"149","line":1,"column":27,"nodeType":"136","messageId":"137","endLine":1,"endColumn":35},{"ruleId":"134","severity":1,"message":"150","line":15,"column":3,"nodeType":"136","messageId":"137","endLine":15,"endColumn":18},{"ruleId":"134","severity":1,"message":"151","line":19,"column":8,"nodeType":"136","messageId":"137","endLine":19,"endColumn":13},{"ruleId":"134","severity":1,"message":"152","line":20,"column":10,"nodeType":"136","messageId":"137","endLine":20,"endColumn":29},{"ruleId":"134","severity":1,"message":"153","line":21,"column":10,"nodeType":"136","messageId":"137","endLine":21,"endColumn":23},{"ruleId":"134","severity":1,"message":"154","line":23,"column":10,"nodeType":"136","messageId":"137","endLine":23,"endColumn":28},{"ruleId":"139","severity":1,"message":"155","line":50,"column":6,"nodeType":"141","endLine":50,"endColumn":8,"suggestions":"156"},{"ruleId":"134","severity":1,"message":"157","line":3,"column":10,"nodeType":"136","messageId":"137","endLine":3,"endColumn":14},{"ruleId":"134","severity":1,"message":"158","line":4,"column":43,"nodeType":"136","messageId":"137","endLine":4,"endColumn":53},{"ruleId":"134","severity":1,"message":"159","line":15,"column":10,"nodeType":"136","messageId":"137","endLine":15,"endColumn":18},{"ruleId":"134","severity":1,"message":"160","line":61,"column":13,"nodeType":"136","messageId":"137","endLine":61,"endColumn":15},{"ruleId":"139","severity":1,"message":"161","line":64,"column":6,"nodeType":"141","endLine":64,"endColumn":20,"suggestions":"162"},{"ruleId":"130","replacedBy":"163"},{"ruleId":"132","replacedBy":"164"},"no-native-reassign",["165"],"no-negated-in-lhs",["166"],"@typescript-eslint/no-unused-vars","'useReducer' is defined but never used.","Identifier","unusedVar","'IRootState' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'dispatch' and 'props.history'. Either include them or remove the dependency array.","ArrayExpression",["167"],"'useEffect' is defined but never used.","'AxiosResponse' is defined but never used.","'Api' is defined but never used.","'setLocalStorage' is defined but never used.",["165"],["166"],"'useState' is defined but never used.","'usersListAction' is defined but never used.","'Modal' is defined but never used.","'getFromLocalStorage' is defined but never used.","'USERS_LOADING' is defined but never used.","'IUserListDashBoard' is defined but never used.","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.",["168"],"'Link' is defined but never used.","'Typography' is defined but never used.","'getUsers' is defined but never used.","'id' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.location.pathname' and 'props.match.params.userId'. Either include them or remove the dependency array.",["169"],["165"],["166"],"no-global-assign","no-unsafe-negation",{"desc":"170","fix":"171"},{"desc":"172","fix":"173"},{"desc":"174","fix":"175"},"Update the dependencies array to be: [dispatch, isAuthenticated, props.history]",{"range":"176","text":"177"},"Update the dependencies array to be: [dispatch]",{"range":"178","text":"179"},"Update the dependencies array to be: [props.location.pathname, props.match.params.userId, selectedUser]",{"range":"180","text":"181"},[1903,1920],"[dispatch, isAuthenticated, props.history]",[1767,1769],"[dispatch]",[1857,1871],"[props.location.pathname, props.match.params.userId, selectedUser]"]