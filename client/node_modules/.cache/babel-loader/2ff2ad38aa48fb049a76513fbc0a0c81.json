{"ast":null,"code":"// import { AxiosResponse } from 'axios';\n// import Api from '../../api/index';\nimport { GET_USERS, SET_ACTIVE_USER, DELETE_USER } from \"./types\";\nimport { tokenConfig } from \"./auth\";\nimport axios from \"../../api/axios\";\nimport { returnErrors } from \"./error\";\nexport const usersListAction = () => async dispatch => {\n  try {// const res:AxiosResponse<any> = await Api.apiGet(\"userList\")\n    // dispatch({ type: GET_USERS, payload: res.data })\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const getUsers = () => (dispatch, getState) => {\n  axios({\n    method: \"get\",\n    url: \"/getUserList\",\n    ...tokenConfig(getState)\n  }) // .get('/api/items')\n  .then(res => dispatch({\n    type: GET_USERS,\n    payload: res\n  })).catch(err => {\n    var _err$data;\n\n    return dispatch(returnErrors({\n      msg: (_err$data = err.data) === null || _err$data === void 0 ? void 0 : _err$data.message\n    }, err.status));\n  });\n};\nexport const setActiveUserAction = payload => async dispatch => {\n  dispatch({\n    type: SET_ACTIVE_USER,\n    payload\n  });\n};\nexport const deleteUserAction = _id => (dispatch, getState) => {\n  try {\n    axios({\n      method: \"get\",\n      url: \"/deleteUser\",\n      params: {\n        _id\n      },\n      ...tokenConfig(getState)\n    }) // .delete(`/api/items/${id}`, tokenConfig(getState))\n    .then(res => dispatch({\n      type: DELETE_USER,\n      payload: _id\n    })).catch(err => {\n      var _err$data2;\n\n      return dispatch(returnErrors({\n        msg: (_err$data2 = err.data) === null || _err$data2 === void 0 ? void 0 : _err$data2.message\n      }, err.status));\n    }); // const res:AxiosResponse<any> = await Api.apiDelete(\"users\", args)\n    //   dispatch(usersListAction());\n  } catch (err) {\n    console.log(err);\n  }\n};\nexport const editUser = ({\n  firstName,\n  email,\n  lastName,\n  Address,\n  mobileNumber,\n  userImage,\n  _id\n}) => (dispatch, getState) => {\n  // Headers\n  // Request body\n  const data = JSON.stringify({\n    firstName,\n    email,\n    lastName,\n    Address,\n    mobileNumber,\n    userImage,\n    userId: _id\n  });\n  axios({\n    method: \"post\",\n    url: \"/editUser\",\n    data,\n    ...tokenConfig(getState)\n  }) // .post('/api/auth/register', body, tokenConfig(getState))\n  .then(res => {\n    dispatch({\n      type: USER_LOADED,\n      payload: res\n    });\n    dispatch(returnErrors({\n      msg: \"User edited successfully\"\n    }, 200));\n  }).catch(err => {\n    var _err$data3;\n\n    dispatch(returnErrors({\n      msg: (_err$data3 = err.data) === null || _err$data3 === void 0 ? void 0 : _err$data3.message\n    }, err.status, \"EDIT_FAIL\"));\n  });\n}; // export const getUserById =\n//   (_id: string) => (dispatch: Dispatch<IAction>, getState: Function) => {\n//     axios({\n//       method: \"get\",\n//       url: \"/getUser\",\n//       params: {\n//         _id: _id || \"\",\n//       },\n//       ...tokenConfig(getState),\n//     })\n//       // .delete(`/api/items/${id}`, tokenConfig(getState))\n//       .then((res: any) => {\n//         dispatch({\n//           type: EDIT_USER,\n//           payload: res?.user,\n//         });\n//         dispatch(returnErrors({ msg: \"User loaded successfully\" }, 200));\n//       })\n//       .catch((err) =>\n//         dispatch(returnErrors({ msg: err.data?.message }, err.status))\n//       );\n//   };","map":{"version":3,"sources":["/home/milan/Milan/Projects/typescript-poc/client/src/redux/actions/user.ts"],"names":["GET_USERS","SET_ACTIVE_USER","DELETE_USER","tokenConfig","axios","returnErrors","usersListAction","dispatch","err","console","log","getUsers","getState","method","url","then","res","type","payload","catch","msg","data","message","status","setActiveUserAction","deleteUserAction","_id","params","editUser","firstName","email","lastName","Address","mobileNumber","userImage","JSON","stringify","userId","USER_LOADED"],"mappings":"AAAA;AAEA;AAEA,SAASA,SAAT,EAAoBC,eAApB,EAAqCC,WAArC,QAAwD,SAAxD;AACA,SAASC,WAAT,QAA4B,QAA5B;AACA,OAAOC,KAAP,MAAkB,iBAAlB;AACA,SAASC,YAAT,QAA6B,SAA7B;AAEA,OAAO,MAAMC,eAA2B,GACtC,MAAM,MAAOC,QAAP,IAAuC;AAC3C,MAAI,CACF;AACA;AACD,GAHD,CAGE,OAAOC,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CARI;AASP,OAAO,MAAMG,QAAQ,GACnB,MAAM,CAACJ,QAAD,EAA8BK,QAA9B,KAAqD;AACzDR,EAAAA,KAAK,CAAC;AACJS,IAAAA,MAAM,EAAE,KADJ;AAEJC,IAAAA,GAAG,EAAE,cAFD;AAGJ,OAAGX,WAAW,CAACS,QAAD;AAHV,GAAD,CAAL,CAKE;AALF,GAMGG,IANH,CAMSC,GAAD,IACJT,QAAQ,CAAC;AACPU,IAAAA,IAAI,EAAEjB,SADC;AAEPkB,IAAAA,OAAO,EAAEF;AAFF,GAAD,CAPZ,EAYGG,KAZH,CAYUX,GAAD;AAAA;;AAAA,WACLD,QAAQ,CAACF,YAAY,CAAC;AAAEe,MAAAA,GAAG,eAAEZ,GAAG,CAACa,IAAN,8CAAE,UAAUC;AAAjB,KAAD,EAA6Bd,GAAG,CAACe,MAAjC,CAAb,CADH;AAAA,GAZT;AAeD,CAjBI;AAmBP,OAAO,MAAMC,mBAAqC,GAC/CN,OAAD,IAAkB,MAAOX,QAAP,IAAyB;AACzCA,EAAAA,QAAQ,CAAC;AAAEU,IAAAA,IAAI,EAAEhB,eAAR;AAAyBiB,IAAAA;AAAzB,GAAD,CAAR;AACD,CAHI;AAKP,OAAO,MAAMO,gBAAgB,GAC1BC,GAAD,IAAiB,CAACnB,QAAD,EAA8BK,QAA9B,KAAqD;AACpE,MAAI;AACFR,IAAAA,KAAK,CAAC;AACJS,MAAAA,MAAM,EAAE,KADJ;AAEJC,MAAAA,GAAG,EAAE,aAFD;AAGJa,MAAAA,MAAM,EAAE;AAAED,QAAAA;AAAF,OAHJ;AAIJ,SAAGvB,WAAW,CAACS,QAAD;AAJV,KAAD,CAAL,CAME;AANF,KAOGG,IAPH,CAOSC,GAAD,IACJT,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEf,WADC;AAEPgB,MAAAA,OAAO,EAAEQ;AAFF,KAAD,CARZ,EAaGP,KAbH,CAaUX,GAAD;AAAA;;AAAA,aACLD,QAAQ,CAACF,YAAY,CAAC;AAAEe,QAAAA,GAAG,gBAAEZ,GAAG,CAACa,IAAN,+CAAE,WAAUC;AAAjB,OAAD,EAA6Bd,GAAG,CAACe,MAAjC,CAAb,CADH;AAAA,KAbT,EADE,CAiBF;AACA;AACD,GAnBD,CAmBE,OAAOf,GAAP,EAAY;AACZC,IAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACD;AACF,CAxBI;AA0BP,OAAO,MAAMoB,QAAQ,GACnB,CAAC;AACCC,EAAAA,SADD;AAECC,EAAAA,KAFD;AAGCC,EAAAA,QAHD;AAICC,EAAAA,OAJD;AAKCC,EAAAA,YALD;AAMCC,EAAAA,SAND;AAOCR,EAAAA;AAPD,CAAD,KASA,CAACnB,QAAD,EAA8BK,QAA9B,KAAqD;AACnD;AAEA;AACA,QAAMS,IAAI,GAAGc,IAAI,CAACC,SAAL,CAAe;AAC1BP,IAAAA,SAD0B;AAE1BC,IAAAA,KAF0B;AAG1BC,IAAAA,QAH0B;AAI1BC,IAAAA,OAJ0B;AAK1BC,IAAAA,YAL0B;AAM1BC,IAAAA,SAN0B;AAO1BG,IAAAA,MAAM,EAAEX;AAPkB,GAAf,CAAb;AAUAtB,EAAAA,KAAK,CAAC;AACJS,IAAAA,MAAM,EAAE,MADJ;AAEJC,IAAAA,GAAG,EAAE,WAFD;AAGJO,IAAAA,IAHI;AAIJ,OAAGlB,WAAW,CAACS,QAAD;AAJV,GAAD,CAAL,CAME;AANF,GAOGG,IAPH,CAOSC,GAAD,IAAS;AACbT,IAAAA,QAAQ,CAAC;AACPU,MAAAA,IAAI,EAAEqB,WADC;AAEPpB,MAAAA,OAAO,EAAEF;AAFF,KAAD,CAAR;AAKAT,IAAAA,QAAQ,CAACF,YAAY,CAAC;AAAEe,MAAAA,GAAG,EAAE;AAAP,KAAD,EAAsC,GAAtC,CAAb,CAAR;AACD,GAdH,EAeGD,KAfH,CAeUX,GAAD,IAAS;AAAA;;AACdD,IAAAA,QAAQ,CACNF,YAAY,CAAC;AAAEe,MAAAA,GAAG,gBAAEZ,GAAG,CAACa,IAAN,+CAAE,WAAUC;AAAjB,KAAD,EAA6Bd,GAAG,CAACe,MAAjC,EAAyC,WAAzC,CADN,CAAR;AAGD,GAnBH;AAoBD,CA5CI,C,CA6CP;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["// import { AxiosResponse } from 'axios';\nimport { Dispatch } from \"redux\";\n// import Api from '../../api/index';\nimport { IAction, IUser } from \"../../utils/interfaces\";\nimport { GET_USERS, SET_ACTIVE_USER, DELETE_USER } from \"./types\";\nimport { tokenConfig } from \"./auth\";\nimport axios from \"../../api/axios\";\nimport { returnErrors } from \"./error\";\n\nexport const usersListAction: () => void =\n  () => async (dispatch: Dispatch<IAction>) => {\n    try {\n      // const res:AxiosResponse<any> = await Api.apiGet(\"userList\")\n      // dispatch({ type: GET_USERS, payload: res.data })\n    } catch (err) {\n      console.log(err);\n    }\n  };\nexport const getUsers =\n  () => (dispatch: Dispatch<IAction>, getState: Function) => {\n    axios({\n      method: \"get\",\n      url: \"/getUserList\",\n      ...tokenConfig(getState),\n    })\n      // .get('/api/items')\n      .then((res) =>\n        dispatch({\n          type: GET_USERS,\n          payload: res,\n        })\n      )\n      .catch((err) =>\n        dispatch(returnErrors({ msg: err.data?.message }, err.status))\n      );\n  };\n\nexport const setActiveUserAction: (a: any) => void =\n  (payload: any) => async (dispatch: any) => {\n    dispatch({ type: SET_ACTIVE_USER, payload });\n  };\n\nexport const deleteUserAction =\n  (_id: string) => (dispatch: Dispatch<IAction>, getState: Function) => {\n    try {\n      axios({\n        method: \"get\",\n        url: \"/deleteUser\",\n        params: { _id },\n        ...tokenConfig(getState),\n      })\n        // .delete(`/api/items/${id}`, tokenConfig(getState))\n        .then((res) =>\n          dispatch({\n            type: DELETE_USER,\n            payload: _id,\n          })\n        )\n        .catch((err) =>\n          dispatch(returnErrors({ msg: err.data?.message }, err.status))\n        );\n      // const res:AxiosResponse<any> = await Api.apiDelete(\"users\", args)\n      //   dispatch(usersListAction());\n    } catch (err) {\n      console.log(err);\n    }\n  };\n\nexport const editUser =\n  ({\n    firstName,\n    email,\n    lastName,\n    Address,\n    mobileNumber,\n    userImage,\n    _id,\n  }: IUser) =>\n  (dispatch: Dispatch<IAction>, getState: Function) => {\n    // Headers\n\n    // Request body\n    const data = JSON.stringify({\n      firstName,\n      email,\n      lastName,\n      Address,\n      mobileNumber,\n      userImage,\n      userId: _id,\n    });\n\n    axios({\n      method: \"post\",\n      url: \"/editUser\",\n      data,\n      ...tokenConfig(getState),\n    })\n      // .post('/api/auth/register', body, tokenConfig(getState))\n      .then((res) => {\n        dispatch({\n          type: USER_LOADED,\n          payload: res,\n        });\n\n        dispatch(returnErrors({ msg: \"User edited successfully\" }, 200));\n      })\n      .catch((err) => {\n        dispatch(\n          returnErrors({ msg: err.data?.message }, err.status, \"EDIT_FAIL\")\n        );\n      });\n  };\n// export const getUserById =\n//   (_id: string) => (dispatch: Dispatch<IAction>, getState: Function) => {\n//     axios({\n//       method: \"get\",\n//       url: \"/getUser\",\n//       params: {\n//         _id: _id || \"\",\n//       },\n//       ...tokenConfig(getState),\n//     })\n//       // .delete(`/api/items/${id}`, tokenConfig(getState))\n//       .then((res: any) => {\n//         dispatch({\n//           type: EDIT_USER,\n//           payload: res?.user,\n//         });\n\n//         dispatch(returnErrors({ msg: \"User loaded successfully\" }, 200));\n//       })\n//       .catch((err) =>\n//         dispatch(returnErrors({ msg: err.data?.message }, err.status))\n//       );\n//   };\n"]},"metadata":{},"sourceType":"module"}